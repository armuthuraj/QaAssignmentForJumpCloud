{
	"info": {
		"_postman_id": "41480438-b394-4587-9244-725762c117f6",
		"name": "password-hash-app",
		"description": "This collection is used to validate the REST functionality of the password hashing app. The REST endpoints of the app include:\n1) Method name: hash, Method type: POST, Request body: JSON data with the password to be hashed, Return value: 'Job identifier' for the SHA-512 hashing job, Response time: 5000ms + hashing time.\n2) Method name: hash, Method type: GET, Input path parameter: Job Identifier, Return value: 'Base64 encoded password hash string', Response time: < 300ms.\n3) Method name: stats, Method type: GET, Return value: 'JSON data structure\nfor the total hash requests since the server started and the average time of a\nhash request in milliseconds.', Response time: < 300ms.\n4) Method name: hash, Method type: POST, Request data: \"shutdown\", Return value: 'Null', Response time: teardown time.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "hashingJob",
			"item": [
				{
					"name": "validatePasswordHashEndpointFunctionality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ad2ae7b-6932-4397-83cb-4435ae569fae",
								"exec": [
									"// Validate the response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response time",
									"pm.test(\"Response time is less than 5100ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5100);",
									"});",
									"",
									"",
									"// Retrieve the jobIdentifier",
									"pm.globals.set(\"jobIdentifier\", pm.response.text());",
									"",
									"// Retrieve average response times",
									"function getAverageResponseTime(data) {",
									"    return data.reduce((total, value)=>total + value) / data.length;",
									"}",
									"",
									"if (responseCode.code === 200) {",
									"    arrResponse = pm.globals.get(\"ResponseTimes\") ? JSON.parse(pm.globals.get(\"ResponseTimes\")) : [];",
									"    arrResponse.push(responseTime);",
									"    pm.globals.set(\"ResponseTimes\", JSON.stringify(arrResponse));",
									"",
									"    responseAvgTime = getAverageResponseTime(arrResponse);",
									"    pm.globals.set('ResponseAverage', responseAvgTime);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "956f0875-69dd-4ff1-aa76-a666c35bc1f8",
								"exec": [
									"pm.globals.set(\"password\", \"angrymonkey\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\": \"{{password}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/hash",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"hash"
							]
						}
					},
					"response": []
				},
				{
					"name": "validatePasswordHashEndpointForUnsupportedMediaType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ad2ae7b-6932-4397-83cb-4435ae569fae",
								"exec": [
									"// Validate the response status",
									"pm.test(\"Status code is '415 Unsupported Media Type' when the 'Content-Type' Header value is not 'application/json'\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "956f0875-69dd-4ff1-aa76-a666c35bc1f8",
								"exec": [
									"pm.globals.set(\"password\", \"angrymonkey\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "*/*",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"password\": \"{{password}}\"}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/hash",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"hash"
							]
						}
					},
					"response": []
				}
			],
			"description": "Validate the REST test scenarios related to the hashing.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "retrievePasswordHash",
			"item": [
				{
					"name": "validateHashedPasswordRetrievalEndpointFunctionality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "319179bc-cf9e-48bb-9d53-afcba9417da5",
								"exec": [
									"// Validate the response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response time",
									"pm.test(\"Response time is less than 10ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10);",
									"});",
									"",
									"// Calculating the SHA-512 value for the given password string",
									"var hashedPassword = CryptoJS.enc.Hex.stringify(CryptoJS.SHA512(pm.globals.get(\"password\")));",
									"pm.globals.set(\"HashedPassword\", hashedPassword);",
									"",
									"// Calculating the Base64 encoded string for the SHA-512 hashed password string",
									"var encodedHashedPassword = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(hashedPassword));",
									"pm.globals.set(\"Base64EncHashedPassword\", encodedHashedPassword);",
									"",
									"//Validate response body to be a Beas64 encoded string after SHA-512 hashing",
									"pm.test(\"Response body text is the Base64 encoded value of the password string after SHA-512 hashing\", function () {",
									"    pm.response.to.have.body(encodedHashedPassword);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "text/plain"
							}
						],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/hash/{{jobIdentifier}}",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"hash",
								"{{jobIdentifier}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Validate the REST test scenarios related to the hashed password retrieval.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "hashStatistics",
			"item": [
				{
					"name": "valiateHashingStatsEndpointFunctionality",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0fb6872b-7c60-4ab1-94f8-1972b24829a8",
								"exec": [
									"// Validate the response status",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Validate the response time",
									"pm.test(\"Response time is less than 10ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10);",
									"});",
									"",
									"// Validate the response object type",
									"pm.test(\"Validate if the response Content-Type is of type JSON\", function () {",
									"   pm.response.to.have.header(\"Content-Type\");",
									"   pm.response.to.be.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"// Validate Response data",
									"var jsonData = JSON.parse(pm.response.text());",
									"pm.test(\"Verify the response value of total hash requests since server started\", function () { ",
									"    pm.expect(jsonData.TotalRequests).is.to.equal(parseInt(pm.globals.get(\"jobIdentifier\"))); ",
									"});",
									"",
									"var jsonData = JSON.parse(pm.response.text());",
									"pm.test(\"Verify the average response time for a hash request in milliseconds after including the hash calculation\", function() { ",
									"    pm.expect(jsonData.AverageTime).to.be.above(Math.floor(pm.globals.get(\"ResponseAverage\")));",
									"});",
									"",
									"    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}:{{port}}/stats",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"stats"
							]
						}
					},
					"response": []
				}
			],
			"description": "REST test scenarios related to the hashing statistics for the current app session.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "tearDown",
			"item": [
				{
					"name": "validateShutdownEndpointResponseCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ed5b3fc-83b7-4744-8959-87d0f9b0f254",
								"exec": [
									"pm.test(\"Verify if the software supports a graceful shutdown - status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "text/plain",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "shutdown",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}:{{port}}/hash",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"hash"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "3faf02c7-6007-4519-8377-94e64d39b510",
			"key": "baseUrl",
			"value": "http://127.0.0.1",
			"type": "string"
		},
		{
			"id": "7646ed99-8395-48b4-b95d-3a5db5f531ba",
			"key": "port",
			"value": "8088",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}